AWSTemplateFormatVersion: 2010-09-09
Description: sample resource template

Parameters:
  ECSContainerName:
    Description: Container Name
    Type: String
    Default: test-app

Resources:
  # ========================================
  # Network, Security
  # ========================================

  # ----------------------------------------
  # VPC
  # ----------------------------------------
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: test-vpc

  # ----------------------------------------
  # IGW
  # ----------------------------------------
  Igw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: test-igw
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref Igw

  # ----------------------------------------
  # Subnet, RouteTable (For Ingress)
  # ----------------------------------------
  SubnetPublicIngress1A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref Vpc
      AvailabilityZone: ap-northeast-1a
      Tags:
        - Key: Name
          Value: test-subnet-public-ingress-1a
        - Key: Type
          Value: Public

  SubnetPublicIngress1C:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref Vpc
      AvailabilityZone: ap-northeast-1c
      Tags:
        - Key: Name
          Value: test-subnet-public-ingress-1c
        - Key: Type
          Value: Public

  RouteIngress:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: test-route-ingress
    DependsOn: AttachGateway

  RouteIngressDefault:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteIngress
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Igw

  RouteIngressAssociation1A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicIngress1A
      RouteTableId: !Ref RouteIngress

  RouteIngressAssociation1C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicIngress1C
      RouteTableId: !Ref RouteIngress

  # ----------------------------------------
  # Subnet, RouteTable (For Application)
  # ----------------------------------------
  SubnetPrivateApp1A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.8.0/24
      VpcId: !Ref Vpc
      AvailabilityZone: ap-northeast-1a
      Tags:
        - Key: Name
          Value: test-subnet-private-app-1a
        - Key: Type
          Value: Private

  SubnetPrivateApp1C:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.9.0/24
      VpcId: !Ref Vpc
      AvailabilityZone: ap-northeast-1c
      Tags:
        - Key: Name
          Value: test-subnet-private-app-1c
        - Key: Type
          Value: Private

  RouteApp:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: test-route-app

  RouteAppAssociation1A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateApp1A
      RouteTableId: !Ref RouteApp

  RouteAppAssociation1C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateApp1C
      RouteTableId: !Ref RouteApp

  # ----------------------------------------
  # SecurityGroup (For Ingress)
  # ----------------------------------------
  SgIngress:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ingress
      GroupDescription: Security group for ingress
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: test-sg-ingress

  # ----------------------------------------
  # SecurityGroup (For App)
  # ----------------------------------------
  SgApp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: app
      GroupDescription: Security group for app
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: test-sg-app

  # InboundRule: LB -> App
  SgAppFromSgIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId:
        Fn::GetAtt:
          - SgIngress
          - GroupId
      GroupId:
        Fn::GetAtt:
          - SgApp
          - GroupId

  # ========================================
  # Application
  # ========================================

  # ----------------------------------------
  # ECR
  # ----------------------------------------
  TestRepository: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: test-repository
      EmptyOnDelete: true

  # ----------------------------------------
  # Task Definition
  # ----------------------------------------
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      Family: test-taskdef
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        OperatingSystemFamily: LINUX  
      ContainerDefinitions:
        - Essential: true
          Image: !GetAtt TestRepository.RepositoryUri
          Name: !Ref ECSContainerName
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
      ExecutionRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/ecs_task_execution

  # ----------------------------------------
  # ECS Cluster
  # ----------------------------------------
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: test-cluster

  # ----------------------------------------
  # ECS Service
  # ----------------------------------------
  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListener
    Properties:
      ServiceName: test-service
      Cluster: !Ref ECSCluster
      DesiredCount: 0
      LaunchType: FARGATE
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerPort: 80
          ContainerName: !Ref ECSContainerName
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref SgApp
          Subnets:
            - !Ref SubnetPrivateApp1A
            - !Ref SubnetPrivateApp1C
      TaskDefinition: !Ref ECSTaskDefinition

  # ------------------------------------------------------------#
  #  ALB
  # ------------------------------------------------------------#
  ApplicationLoadBalancer:
    Type : AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: test-alb
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SgIngress
      Subnets:
        - !Ref SubnetPublicIngress1A
        - !Ref SubnetPublicIngress1C

  # ------------------------------------------------------------#
  #  Target Group 
  # ------------------------------------------------------------#
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: test-target-group
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref Vpc

  # ------------------------------------------------------------#
  #  ALB Listner
  # ------------------------------------------------------------#
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP